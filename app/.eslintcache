[{"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Navbar\\NavbarElements.js":"1","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\App.jsx":"2","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ContentSection\\index.js":"3","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ControlPanelSection\\ControlPanelElements.js":"4","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Sidebar\\SidebarElements.js":"5","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\index.js":"6","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ControlPanelSection\\index.js":"7","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\index.js":"8"},{"size":2576,"mtime":1610659255691,"results":"9","hashOfConfig":"10"},{"size":4886,"mtime":1610659255654,"results":"11","hashOfConfig":"10"},{"size":4331,"mtime":1610659255671,"results":"12","hashOfConfig":"10"},{"size":2826,"mtime":1609721846417,"results":"13","hashOfConfig":"10"},{"size":1903,"mtime":1607686165155,"results":"14","hashOfConfig":"10"},{"size":363,"mtime":1609764458221,"results":"15","hashOfConfig":"10"},{"size":9800,"mtime":1610662485743,"results":"16","hashOfConfig":"10"},{"size":880,"mtime":1610662490141,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nif9a4",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Navbar\\NavbarElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\App.jsx",["35"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ContentSection\\index.js",["36","37","38","39"],"import React, { useEffect, useState } from 'react'\r\nimport { ContentListItem, ListEditIcon, ListDate, ListPersonName, ListTime } from './ContentElements';\r\nimport { connect } from 'react-redux';\r\nimport { getProjectArray, projectAdded } from '../../Store/slices/projects';\r\nimport { getUsersArray } from '../../Store/slices/users';\r\nimport { getTimecardArray } from '../../Store/slices/timecards';\r\n\r\nconst ContentSection = (\r\n\t{\r\n\t\tprojectId,\r\n\t\tsetTotalTime,\r\n\t\tsetCardCount,\r\n\t\tselectedMonth,\r\n\t\tselectedContractor,\r\n\t\tcurrentModeIndex,\r\n\t\tdispatch,\r\n\t\tprojects,\r\n\t\ttimeCards,\r\n\t\tusers\r\n\t}\r\n) => {\r\n\r\n\tconst [{ savedTime }, setSavedTime] = useState({ savedTime: 0 })\r\n\t// const [{ cardCount }, setCardCount] = useState({ cardCount: 0 })\r\n\tconst firstMode = currentModeIndex === 0; // Project hours\r\n\tconst secondMode = currentModeIndex === 1; // Contractor hours\r\n\r\n\tuseEffect(() => {\r\n\t\tsetTotalTime({ totalTime: savedTime })\r\n\t}, [savedTime, projectId, setTotalTime, selectedMonth, currentModeIndex, selectedContractor])\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSavedTime({ savedTime: calcTime() });\r\n\t\ttimeWorked();\r\n\t}, [projectId, currentModeIndex, selectedContractor, selectedMonth])\r\n\r\n\r\n\tconst hours = time => Math.floor(time);\r\n\tconst minutes = time => ((time - hours(time)) * 60).toPrecision(2) / 1;\r\n\tconst colorAlternator = id => id % 2 === 0 ? '0.1' : '0.2';\r\n\tconst listColor = id => (`rgb(0 0 0 / ${colorAlternator(id)})`);\r\n\tconst timeFormat = time => (`${hours(time)}h ${minutes(time)}min`);\r\n\r\n\tfunction timeWorked() {\r\n\t\tlet totalTime = [0];\r\n\t\tlet cardsCounted = 0;\r\n\r\n\t\tconst projectTime = timeCards\r\n\t\t\t.filter(card => card.jobDate.split('.')[1] - 1 === selectedMonth)\r\n\t\t\t.filter(c => c.projectId === projectId)\r\n\t\t\t.map((card, index) => {\r\n\t\t\t\tconst timeWorked = card.hours;\r\n\r\n\t\t\t\tif (firstMode) {\r\n\t\t\t\t\tcardsCounted = index + 1;\r\n\t\t\t\t\ttotalTime.push(timeWorked);\r\n\t\t\t\t}\r\n\t\t\t\treturn totalTime;\r\n\t\t\t})[0] || [0]\r\n\r\n\t\tconst contractorTime = timeCards\r\n\t\t\t.filter(card => card.jobDate.split('.')[1] - 1 === selectedMonth)\r\n\t\t\t.filter(card => users.find(user => user.id === card.userId).name === selectedContractor)\r\n\t\t\t.map((card, index) => {\r\n\t\t\t\tconst timeWorked = card.hours;\r\n\r\n\t\t\t\tif (secondMode) {\r\n\t\t\t\t\tcardsCounted = index + 1;\r\n\t\t\t\t\ttotalTime.push(timeWorked);\r\n\t\t\t\t}\r\n\t\t\t\treturn totalTime;\r\n\t\t\t})[0] || [0]\r\n\r\n\t\tif (secondMode) setCardCount({ cardCount: totalTime.length - 1 });\r\n\t\tif (firstMode) setCardCount({ cardCount: cardsCounted });\r\n\r\n\t\treturn totalTime;\r\n\t};\r\n\r\n\tfunction calcTime() { return timeWorked().reduce((acc, curr) => acc + curr) }\r\n\r\n\r\n\r\n\tfunction renderList() {\r\n\t\tconst projectCards = timeCards\r\n\t\t\t.filter(card => card.jobDate.split('.')[1] - 1 === selectedMonth)\r\n\t\t\t.filter(c => c.projectId === projectId)\r\n\t\t\t.map((card, index) => {\r\n\t\t\t\tconst calculatedTime = card.hours;\r\n\t\t\t\tconst contractorsName = users.find(user => user.id === card.userId).name;\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<ContentListItem key={card.id} listColor={listColor(index)}>\r\n\t\t\t\t\t\t<ListEditIcon />\r\n\t\t\t\t\t\t<ListDate>{card.jobDate}</ListDate>\r\n\t\t\t\t\t\t<ListPersonName>{contractorsName}</ListPersonName>\r\n\t\t\t\t\t\t<ListTime>{timeFormat(calculatedTime)}</ListTime>\r\n\t\t\t\t\t</ContentListItem>\r\n\t\t\t\t)\r\n\t\t\t});\r\n\r\n\t\tconst contractorCards = timeCards\r\n\t\t\t.filter(card => card.jobDate.split('.')[1] - 1 === selectedMonth)\r\n\t\t\t.filter(card => users.find(user => user.id === card.userId).name === selectedContractor)\r\n\t\t\t.map((card, index) => {\r\n\t\t\t\tconst projectName = projects.find(project => project.id === card.projectId).address;\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<ContentListItem key={card.projectId} listColor={listColor(index)}>\r\n\t\t\t\t\t\t<ListEditIcon />\r\n\t\t\t\t\t\t<ListDate>{card.jobDate}</ListDate>\r\n\t\t\t\t\t\t<ListPersonName>{projectName}</ListPersonName>\r\n\t\t\t\t\t\t<ListTime>{timeFormat(card.hours)}</ListTime>\r\n\t\t\t\t\t</ContentListItem>\r\n\t\t\t\t)\r\n\t\t\t});\r\n\r\n\t\tif (firstMode) return projectCards;\r\n\t\tif (secondMode) return contractorCards;\r\n\t}\r\n\r\n\r\n\r\n\treturn (<>{renderList()}</>)\r\n}\r\n\r\nconst mapStateToProps = (state) =>\r\n({\r\n\tprojects: getProjectArray(state),\r\n\tusers: getUsersArray(state),\r\n\ttimeCards: getTimecardArray(state)\r\n})\r\n\r\n\r\n// mapStateToProps takes state of the store and returns the part you are interested in:\r\n// the properties of this object will end up as props of our componennt\r\nexport default connect(mapStateToProps)(ContentSection);\r\n\r\n","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ControlPanelSection\\ControlPanelElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Sidebar\\SidebarElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\index.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ControlPanelSection\\index.js",["40"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\index.js",[],{"ruleId":"41","severity":1,"message":"42","line":64,"column":5,"nodeType":"43","endLine":64,"endColumn":7,"suggestions":"44"},{"ruleId":"45","severity":1,"message":"46","line":4,"column":27,"nodeType":"47","messageId":"48","endLine":4,"endColumn":39},{"ruleId":"41","severity":1,"message":"49","line":35,"column":5,"nodeType":"43","endLine":35,"endColumn":69,"suggestions":"50"},{"ruleId":"45","severity":1,"message":"51","line":48,"column":9,"nodeType":"47","messageId":"48","endLine":48,"endColumn":20},{"ruleId":"45","severity":1,"message":"52","line":61,"column":9,"nodeType":"47","messageId":"48","endLine":61,"endColumn":23},{"ruleId":"41","severity":1,"message":"53","line":45,"column":7,"nodeType":"43","endLine":45,"endColumn":48,"suggestions":"54"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["55"],"no-unused-vars","'projectAdded' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'calcTime' and 'timeWorked'. Either include them or remove the dependency array.",["56"],"'projectTime' is assigned a value but never used.","'contractorTime' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'idListPerMode'. Either include it or remove the dependency array.",["57"],{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [dispatch]",{"range":"64","text":"65"},"Update the dependencies array to be: [projectId, currentModeIndex, selectedContractor, selectedMonth, calcTime, timeWorked]",{"range":"66","text":"67"},"Update the dependencies array to be: [currentModeIndex, idListPerMode, monthIndex, timecards]",{"range":"68","text":"69"},[4422,4424],"[dispatch]",[1114,1178],"[projectId, currentModeIndex, selectedContractor, selectedMonth, calcTime, timeWorked]",[2303,2344],"[currentModeIndex, idListPerMode, monthIndex, timecards]"]