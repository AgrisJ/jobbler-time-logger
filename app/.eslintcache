[{"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\timecards.js":"1","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\App.jsx":"2","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\services\\helpfulFunctions.js":"3","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ContentSection\\ContentElements.js":"4","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ControlPanelSection\\index.js":"5","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\addRemove.js":"6","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ControlPanelSection\\ControlPanelElements.js":"7","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Checkbox\\index.js":"8","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\index.js":"9","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\services\\companyConfig.js":"10","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ModeSwitcher\\ModeSwitcherElements.js":"11","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\middleware\\api.js":"12","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Sidebar\\SidebarElements.js":"13","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\AddEntryForm\\index.js":"14","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\login.js":"15","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Checkbox\\CheckboxElements.js":"16","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\addEntry.js":"17","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\login.js":"18","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ContentSection\\index.js":"19","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\DropdownMenu\\index.js":"20","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\users.js":"21","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\SelectUsers\\index.js":"22","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\DropdownMenu\\dropdownMenuElements.js":"23","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\monthIndex.js":"24","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Modal\\ModalElements.js":"25","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\AddDataForm\\index.js":"26","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Navbar\\NavbarElements.js":"27","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\recordOverview.js":"28","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\projects.js":"29","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\AddEntryForm\\AddEntryFormElements.js":"30","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\SelectUsers\\SelectUsersElements.js":"31","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\admin.js":"32","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\PrintContent\\PrintContentElements.js":"33","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\AddDataForm\\AddDataFormElements.js":"34","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\PrintContent\\index.js":"35","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Modal\\index.js":"36","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\totalTime.js":"37","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\configureStore.js":"38","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\printReport.js":"39"},{"size":2659,"mtime":1613838461964,"results":"40","hashOfConfig":"41"},{"size":5758,"mtime":1613644380131,"results":"42","hashOfConfig":"41"},{"size":189,"mtime":1612873863703,"results":"43","hashOfConfig":"41"},{"size":1037,"mtime":1611177355862,"results":"44","hashOfConfig":"41"},{"size":7606,"mtime":1613644428888,"results":"45","hashOfConfig":"41"},{"size":6545,"mtime":1613466285210,"results":"46","hashOfConfig":"41"},{"size":2832,"mtime":1611522796953,"results":"47","hashOfConfig":"41"},{"size":593,"mtime":1612175446853,"results":"48","hashOfConfig":"41"},{"size":378,"mtime":1610659255941,"results":"49","hashOfConfig":"41"},{"size":179,"mtime":1613346985757,"results":"50","hashOfConfig":"41"},{"size":557,"mtime":1612175446859,"results":"51","hashOfConfig":"41"},{"size":793,"mtime":1613391465151,"results":"52","hashOfConfig":"41"},{"size":2342,"mtime":1613346985739,"results":"53","hashOfConfig":"41"},{"size":9327,"mtime":1613728381363,"results":"54","hashOfConfig":"41"},{"size":183,"mtime":1612871879913,"results":"55","hashOfConfig":"41"},{"size":1175,"mtime":1612175446852,"results":"56","hashOfConfig":"41"},{"size":2256,"mtime":1613384553980,"results":"57","hashOfConfig":"41"},{"size":1081,"mtime":1613346985725,"results":"58","hashOfConfig":"41"},{"size":6221,"mtime":1613838613147,"results":"59","hashOfConfig":"41"},{"size":826,"mtime":1613852332736,"results":"60","hashOfConfig":"41"},{"size":1325,"mtime":1613485008981,"results":"61","hashOfConfig":"41"},{"size":5974,"mtime":1613384739361,"results":"62","hashOfConfig":"41"},{"size":617,"mtime":1613852238924,"results":"63","hashOfConfig":"41"},{"size":555,"mtime":1611177355857,"results":"64","hashOfConfig":"41"},{"size":2133,"mtime":1612175446857,"results":"65","hashOfConfig":"41"},{"size":7745,"mtime":1613492548519,"results":"66","hashOfConfig":"41"},{"size":2594,"mtime":1613490361356,"results":"67","hashOfConfig":"41"},{"size":1435,"mtime":1613346985744,"results":"68","hashOfConfig":"41"},{"size":1434,"mtime":1613462304728,"results":"69","hashOfConfig":"41"},{"size":2114,"mtime":1613385285868,"results":"70","hashOfConfig":"41"},{"size":328,"mtime":1613384831116,"results":"71","hashOfConfig":"41"},{"size":1010,"mtime":1613346985744,"results":"72","hashOfConfig":"41"},{"size":2369,"mtime":1612175446863,"results":"73","hashOfConfig":"41"},{"size":1479,"mtime":1612175446850,"results":"74","hashOfConfig":"41"},{"size":7706,"mtime":1613435787084,"results":"75","hashOfConfig":"41"},{"size":822,"mtime":1612516636919,"results":"76","hashOfConfig":"41"},{"size":535,"mtime":1611177355858,"results":"77","hashOfConfig":"41"},{"size":359,"mtime":1613346985720,"results":"78","hashOfConfig":"41"},{"size":369,"mtime":1611177355875,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nif9a4",{"filePath":"82","messages":"83","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"135"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\timecards.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\App.jsx",["182","183","184","185","186","187","188","189","190"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\services\\helpfulFunctions.js",[],["191","192"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ContentSection\\ContentElements.js",[],["193","194"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ControlPanelSection\\index.js",["195","196","197","198","199","200"],"import React, { useCallback, useEffect, useState } from 'react'\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport '../../Styles/dropdown.css'\r\nimport { ControlPanelContainer, ControlPanelContent, ControlPanelMonth, TotalDisplay, TotalDisplayWrapper, TotalTime, BackwardCaret, ForwardCaret, CardCounter } from './ControlPanelElements'\r\nimport { getProjectArray } from '../../Store/slices/projects';\r\nimport { connect } from 'react-redux';\r\nimport { getUsersArray } from '../../Store/slices/users';\r\nimport { getTimecardArray } from './../../Store/slices/timecards';\r\nimport { getMonthIndex, monthIndexChanged } from '../../Store/slices/monthIndex';\r\nimport { currentAddressChanged, getcurrentAddress } from '../../Store/slices/currentAddress';\r\nimport { currentContractorChanged, getcurrentContractor } from '../../Store/slices/currentContractor';\r\nimport { getcurrentModeIndex } from '../../Store/slices/currentModeIndex';\r\nimport { gettotalTime } from '../../Store/slices/totalTime';\r\nimport { getcardCount } from '../../Store/slices/cardCount';\r\nimport Checkbox from './../Checkbox/index';\r\nimport SelectUsers from '../SelectUsers';\r\nimport { isLocalStored } from './../services/helpfulFunctions';\r\nimport ModeSwitcher from '../ModeSwitcher';\r\nimport { getLoginData, loggedIn } from '../../Store/slices/login';\r\n\r\nfunction ControlPanelSection(\r\n\t{\r\n\t\tisAdmin,\r\n\t\tlogin,\r\n\t\tprojects,\r\n\t\tusers,\r\n\t\ttimecards,\r\n\t\tmonthIndex = 0,\r\n\t\tcurrentAddress,\r\n\t\tcurrentContractor,\r\n\t\tcurrentModeIndex,\r\n\t\ttotalTime,\r\n\t\tcardCount,\r\n\t\tdispatch,\r\n\t\tsetprintAllChecked,\r\n\t\tprintAllChecked\r\n\t}\r\n) {\r\n\tconst addresses = projects.map(project => {\r\n\t\treturn { id: project.id, address: project.address, projectId: project.projectId }\r\n\t}\r\n\t);\r\n\tconst loggedInUserId = login.userId;\r\n\tconst contractors = users.map(card => ({ name: card.name, userId: card.userId }));\r\n\tconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\tconst IS_PRINT_MODE = ['print'].some(item => window.location.href.indexOf(item) !== -1) ? true : false;\r\n\tconst [{ listCardCount }, setListCardCount] = useState({ listCardCount: [] });\r\n\tconst [{ monthNow }, setmonthNow] = useState({ monthNow: new Date() });\r\n\r\n\tconst listIds =\r\n\t\tuseCallback(() => idListPerMode(currentModeIndex)\r\n\t\t\t.map(id => {\r\n\r\n\t\t\t\tlet propForMode = null;\r\n\t\t\t\tif (currentModeIndex === 0) propForMode = 'projectId';\r\n\t\t\t\tif (currentModeIndex === 1) propForMode = 'userId';\r\n\r\n\t\t\t\treturn timecards\r\n\t\t\t\t\t.filter(c => isAdmin ? c : c.userId === loggedInUserId)\r\n\t\t\t\t\t.filter(card => card[propForMode] === id)\r\n\t\t\t\t\t.filter(card => card.jobDate.split('-')[1] - 1 === monthIndex).length\r\n\t\t\t}\r\n\t\t\t), [currentModeIndex, monthIndex, timecards]);\r\n\tconst firstAddress = useCallback(() => (addresses[0] ? { id: addresses[0].id, address: addresses[0].address, projectId: addresses[0].projectId, loading: false } : null), [addresses]);\r\n\tconst firstContractor = contractors[0];\r\n\tconst firstTimeLoadedAddress = firstAddress() && currentAddress.address === null;\r\n\tconst firstTimeLoadedContractor = firstContractor && !currentContractor;\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getMonth = monthNow !== null ? monthNow.getMonth() : null;\r\n\t\tdispatch(monthIndexChanged({ monthIndex: getMonth || 0 }));\r\n\t\tisLocalStored('monthIndex') && dispatch(monthIndexChanged({ monthIndex: +isLocalStored('monthIndex') }));\r\n\r\n\t}, []);\r\n\r\n\tuseEffect(() => { localStorage.setItem('monthIndex', monthIndex) }, [monthIndex]);\r\n\tuseEffect(() => { localStorage.setItem('currentModeIndex', currentModeIndex) }, [currentModeIndex]);\r\n\tuseEffect(() => { firstTimeLoadedAddress && dispatch(currentAddressChanged(firstAddress())) }, [firstAddress, firstTimeLoadedAddress]);\r\n\tuseEffect(() => { firstTimeLoadedContractor && dispatch(currentContractorChanged(firstContractor)) }, [firstContractor, firstTimeLoadedContractor]);\r\n\tuseEffect(() => { currentAddress && localStorage.setItem('currentAddress', JSON.stringify(currentAddress)) }, [currentAddress]);\r\n\tuseEffect(() => { currentContractor && localStorage.setItem('currentContractor', JSON.stringify(currentContractor)) }, [currentContractor]);\r\n\tuseEffect(() => { setListCardCount({ listCardCount: listIds() }); }, [monthIndex, currentAddress, currentContractor, listIds]);\r\n\r\n\tconst defaultMonth = months[monthIndex];\r\n\tconst _onSelectMonth = event => {\r\n\t\tconst foundIndex = months.indexOf(event.value);\r\n\t\tconst isMonthIndex = typeof monthIndex !== 'undefined' || monthIndex !== null;\r\n\t\tif (isMonthIndex) dispatch(monthIndexChanged({ monthIndex: foundIndex }));\r\n\t};\r\n\r\n\tconst prevMonth = () => (dispatch(monthIndexChanged({ monthIndex: monthIndex ? monthIndex - 1 : months.length - 1 })));\r\n\tconst nextMonth = () => (dispatch(monthIndexChanged({ monthIndex: monthIndex < months.length - 1 ? monthIndex + 1 : 0 })));\r\n\tconst hours = time => Math.floor(time);\r\n\tconst minutes = time => ((time - hours(time)) * 60).toPrecision(2) / 1;\r\n\tconst formattedTime = time => (`${hours(time)}h ${minutes(time)}min`);\r\n\r\n\tfunction idListPerMode(mode) {\r\n\t\tlet resultIds = [];\r\n\r\n\t\tswitch (mode) {\r\n\r\n\t\t\tcase 0:\r\n\t\t\t\tresultIds = addresses.map(card => card.projectId)\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tresultIds = users.map(card => card.userId);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t}\r\n\t\treturn resultIds;\r\n\t}\r\n\r\n\tconst handlePrintAllCheckboxChange = event => {\r\n\t\tsetprintAllChecked({ printAllChecked: event.target.checked });\r\n\t}\r\n\r\n\tfunction ONLY_ON_PRINT_MODULES() {\r\n\t\tif (IS_PRINT_MODE)\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\tchecked={printAllChecked}\r\n\t\t\t\t\t\tonChange={handlePrintAllCheckboxChange}\r\n\t\t\t\t\t\tlabelText={'Select All'}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\telse return null;\r\n\t}\r\n\r\n\tfunction HIDE_ON_PRINT_MODULES() {\r\n\t\tif (!IS_PRINT_MODE)\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<TotalDisplayWrapper>\r\n\t\t\t\t\t\t<SelectUsers listCardCount={listCardCount} isAdmin={isAdmin} />\r\n\t\t\t\t\t\t<TotalDisplay>\r\n\t\t\t\t\t\t\tTotal: <TotalTime>{formattedTime(totalTime)}</TotalTime>\r\n\t\t\t\t\t\t</TotalDisplay>\r\n\t\t\t\t\t</TotalDisplayWrapper>\r\n\t\t\t\t\t<CardCounter>{`${cardCount} entries`}</CardCounter>\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t\telse return null;\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ControlPanelContainer>\r\n\t\t\t\t<ControlPanelContent>\r\n\t\t\t\t\t{isAdmin ? <ModeSwitcher titles={['Project hours', 'Contractor Hours']} /> : null}\r\n\t\t\t\t\t<ControlPanelMonth>\r\n\t\t\t\t\t\t<BackwardCaret onClick={prevMonth} />\r\n\t\t\t\t\t\t<Dropdown\r\n\t\t\t\t\t\t\toptions={months}\r\n\t\t\t\t\t\t\tonChange={_onSelectMonth}\r\n\t\t\t\t\t\t\tvalue={defaultMonth}\r\n\t\t\t\t\t\t\tmenuClassName='monthMenuClass'\r\n\t\t\t\t\t\t\tclassName='monthMenuClass'\r\n\t\t\t\t\t\t\tplaceholderClassName='monthMenuClass'\r\n\t\t\t\t\t\t\tcontrolClassName='monthControlClass'\r\n\t\t\t\t\t\t\tarrowClosed={<span className=\"\" />}\r\n\t\t\t\t\t\t\tarrowOpen={<span className=\"\" />} />\r\n\t\t\t\t\t\t<ForwardCaret onClick={nextMonth} />\r\n\t\t\t\t\t</ControlPanelMonth>\r\n\t\t\t\t\t{ONLY_ON_PRINT_MODULES()}\r\n\t\t\t\t\t{HIDE_ON_PRINT_MODULES()}\r\n\t\t\t\t</ControlPanelContent>\r\n\t\t\t</ControlPanelContainer>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n\r\nconst mapStateToProps = state =>\r\n({\r\n\tprojects: getProjectArray(state),\r\n\tusers: getUsersArray(state),\r\n\ttimecards: getTimecardArray(state),\r\n\tmonthIndex: getMonthIndex(state),\r\n\tcurrentAddress: getcurrentAddress(state),\r\n\tcurrentContractor: getcurrentContractor(state),\r\n\tcurrentModeIndex: getcurrentModeIndex(state),\r\n\ttotalTime: gettotalTime(state),\r\n\tcardCount: getcardCount(state),\r\n\tlogin: getLoginData(state)\r\n\r\n})\r\n\r\n\r\n// mapStateToProps takes state of the store and returns the part you are interested in:\r\n// the properties of this object will end up as props of our componennt\r\nexport default connect(mapStateToProps)(ControlPanelSection);\r\n","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\addRemove.js",["201"],"import React, { useState } from 'react'\r\nimport { ActionButton, Container } from '../components/common/commonElements';\r\nimport Navbar from '../components/Navbar'\r\nimport SelectUsers from '../components/SelectUsers';\r\nimport Sidebar from '../components/Sidebar'\r\nimport ModeSwitcher from './../components/ModeSwitcher/index';\r\nimport { connect } from 'react-redux';\r\nimport { getUsersArray, userRemoved } from '../Store/slices/users';\r\nimport { getProjectArray, projectRemoved } from '../Store/slices/projects';\r\nimport { currentAddressChanged, getcurrentAddress } from '../Store/slices/currentAddress';\r\nimport { currentContractorChanged, getcurrentContractor } from '../Store/slices/currentContractor';\r\nimport { getcurrentModeIndex } from '../Store/slices/currentModeIndex';\r\nimport Modal from '../components/Modal';\r\nimport { getTimecardArray, timecardsOfUserRemoved, timecardsOfProjectRemoved } from '../Store/slices/timecards';\r\nimport AddDataForm from '../components/AddDataForm';\r\nimport * as actions from '../Store/api';\r\nimport { companyConfig } from '../services/companyConfig';\r\nimport { getLoginData } from '../Store/slices/login';\r\n\r\n\r\nconst AddRemove = ({ dispatch, projects, users, currentAddress, currentContractor, currentModeIndex, login, timecards }) => {\r\n\tconst [{ isOpen }, setIsOpen] = useState({ isOpen: false });\r\n\tconst [{ showModal }, setshowModal] = useState({ showModal: false });\r\n\r\n\tconst toggle = () => setIsOpen({ isOpen: !isOpen });\r\n\r\n\tconst firstMode = currentModeIndex === 0; // Project hours\r\n\tconst secondMode = currentModeIndex === 1; // Contractor hours\r\n\r\n\tconst handleRemove = () => {\r\n\t\tconst currentUserId = (relativeId = false) => {\r\n\t\t\tconst firstUserId = typeof users[0] !== 'undefined' ? users[0].userId : null;\r\n\t\t\tconst firstUserRelativeId = typeof users[0] !== 'undefined' ? users[0].id : null;\r\n\t\t\tconst selectedUser = users.find(user => user.userId === currentContractor.userId);\r\n\r\n\t\t\tif (!relativeId) {\r\n\t\t\t\treturn typeof selectedUser !== 'undefined' ?\r\n\t\t\t\t\tselectedUser.userId :\r\n\t\t\t\t\tnull || firstUserId\r\n\t\t\t} else {\r\n\t\t\t\treturn typeof selectedUser !== 'undefined' ?\r\n\t\t\t\t\tselectedUser.id :\r\n\t\t\t\t\tnull || firstUserRelativeId\r\n\t\t\t}\r\n\r\n\t\t};\r\n\t\tconst currentProjectId = (relativeId = false) => {\r\n\t\t\tconst firstProjectId = typeof projects[0] !== 'undefined' ? projects[0].projectId : null;\r\n\t\t\tconst firstProjectRelativeId = typeof projects[0] !== 'undefined' ? projects[0].id : null;\r\n\t\t\tconst selectedProject = projects.find(project => project.projectId === currentAddress.projectId);\r\n\r\n\t\t\tif (!relativeId) {\r\n\t\t\t\treturn typeof selectedProject !== 'undefined' ?\r\n\t\t\t\t\tselectedProject.projectId :\r\n\t\t\t\t\tnull || firstProjectId\r\n\t\t\t} else {\r\n\t\t\t\treturn typeof selectedProject !== 'undefined' ?\r\n\t\t\t\t\tselectedProject.id :\r\n\t\t\t\t\tnull || firstProjectRelativeId\r\n\t\t\t}\r\n\r\n\r\n\t\t};\r\n\r\n\t\tconst handleRemoveUser = () => {\r\n\r\n\t\t\t// delete user\r\n\t\t\tdispatch(actions.apiCallBegan({\r\n\t\t\t\turl: `/v1/user/${currentUserId()}`,\r\n\t\t\t\tmethod: \"PATCH\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\t\"deleted\": true\r\n\t\t\t\t},\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tsession: login.session\r\n\t\t\t\t},\r\n\t\t\t\tonSuccess: \"users/userRemoved\"\r\n\t\t\t}));\r\n\r\n\t\t\ttimecards.forEach(card => {\r\n\t\t\t\t// delete all user cards\r\n\t\t\t\tif (card.userId === currentUserId()) {\r\n\t\t\t\t\tdispatch(actions.apiCallBegan({\r\n\t\t\t\t\t\turl: `/v1/timecard/${card.cardId}`,\r\n\t\t\t\t\t\tmethod: \"DELETE\",\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\tsession: login.session\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonSuccess: \"timecards/timecardRemoved\"\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// remove user and cards from Store\r\n\t\t\tdispatch(userRemoved({ userId: currentUserId() }))\r\n\t\t\tdispatch(timecardsOfUserRemoved({ id: currentUserId(true) }))\r\n\r\n\t\t};\r\n\t\tconst handleRemoveProject = () => {\r\n\r\n\t\t\t// delete project\r\n\t\t\tdispatch(actions.apiCallBegan({\r\n\t\t\t\turl: `/v1/project/${currentProjectId()}`,\r\n\t\t\t\tmethod: \"PATCH\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\t\"active\": false\r\n\t\t\t\t},\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tsession: login.session\r\n\t\t\t\t},\r\n\t\t\t\tonSuccess: \"projects/projectRemoved\"\r\n\t\t\t}));\r\n\r\n\t\t\ttimecards.forEach(card => {\r\n\t\t\t\t// delete all project cards\r\n\t\t\t\tif (card.projectId === currentProjectId()) {\r\n\t\t\t\t\tdispatch(actions.apiCallBegan({\r\n\t\t\t\t\t\turl: `/v1/timecard/${card.cardId}`,\r\n\t\t\t\t\t\tmethod: \"DELETE\",\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\tsession: login.session\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonSuccess: \"timecards/timecardRemoved\"\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// remove user and cards from Store\r\n\t\t\tdispatch(projectRemoved({ projectId: currentProjectId() }));\r\n\t\t\tdispatch(timecardsOfProjectRemoved({ id: currentProjectId(true) }))\r\n\t\t}\r\n\r\n\t\tsetshowModal({ showModal: true });\r\n\r\n\t\tconst firstUser = users.length > 0 ? users.find(user => user.userId === currentUserId()) : null;\r\n\r\n\t\tif (showModal) {\r\n\r\n\t\t\tsetshowModal({ showModal: false });\r\n\t\t\tif (firstMode) handleRemoveProject();\r\n\t\t\tif (secondMode) handleRemoveUser();\r\n\r\n\t\t} else {\r\n\t\t\tconst selectedAddress = projects.length > 0 ? projects.find(project => project.id === currentProjectId(true)).address : null;\r\n\t\t\tif (firstMode) dispatch(currentAddressChanged({ address: selectedAddress, projectId: currentProjectId() }));\r\n\t\t\tif (secondMode) dispatch(currentContractorChanged(firstUser));\r\n\t\t}\r\n\t}\r\n\r\n\tconst cancelModal = () => setshowModal({ showModal: false });\r\n\tconst itemToRemove = () => {\r\n\t\tif (firstMode) return currentAddress.address;\r\n\t\tif (secondMode) return currentContractor.name\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Sidebar isOpen={isOpen} toggle={toggle} isAdmin={true} />\r\n\t\t\t<Navbar toggle={toggle} />\r\n\t\t\t<ModeSwitcher titles={['Projects', 'Contractors']} />\r\n\t\t\t<SelectUsers />\r\n\t\t\t<Container>\r\n\t\t\t\t<ActionButton onClick={handleRemove} color={'rgb(252, 67, 100)'}>Remove</ActionButton>\r\n\t\t\t</Container>\r\n\t\t\t<Modal\r\n\t\t\t\tshowModal={showModal}\r\n\t\t\t\tactionActivated={() => handleRemove}\r\n\t\t\t\thighlightedText={'Remove'}\r\n\t\t\t\tmodalText={itemToRemove()}\r\n\t\t\t\tmodalSubText={'* All data will be also deleted'}\r\n\t\t\t\tcancelModal={() => cancelModal()} />\r\n\t\t\t<AddDataForm />\r\n\t\t\t{/*TODO Add animated notification - 'name' erased  */}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state) =>\r\n({\r\n\tprojects: getProjectArray(state),\r\n\tusers: getUsersArray(state),\r\n\ttimecards: getTimecardArray(state),\r\n\t// monthIndex: getMonthIndex(state),\r\n\tcurrentAddress: getcurrentAddress(state),\r\n\tcurrentContractor: getcurrentContractor(state),\r\n\tcurrentModeIndex: getcurrentModeIndex(state),\r\n\tlogin: getLoginData(state)\r\n})\r\n\r\n\r\n// mapStateToProps takes state of the store and returns the part you are interested in:\r\n// the properties of this object will end up as props of our componennt\r\nexport default connect(mapStateToProps)(AddRemove);",["202","203"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ControlPanelSection\\ControlPanelElements.js",[],["204","205"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Checkbox\\index.js",[],["206","207"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\index.js",[],["208","209"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\services\\companyConfig.js",[],["210","211"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ModeSwitcher\\ModeSwitcherElements.js",[],["212","213"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\middleware\\api.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Sidebar\\SidebarElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\AddEntryForm\\index.js",["214","215","216"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Joi from 'joi-browser';\r\nimport { FormInput, FormWrapper, FormButton, FormContent, Form, FormH1, FormLabel, ScrollAnchor, ErrorMessage, TotalHoursDisplay, DisplayLabel } from './AddEntryFormElements';\r\nimport * as actions from '../../Store/api';\r\nimport { getLoginData } from '../../Store/slices/login';\r\nimport { errorMessagePerType, scrollDownTo } from '../AddDataForm';\r\nimport { getcurrentAddress } from '../../Store/slices/currentAddress';\r\nimport { getTimecardArray } from '../../Store/slices/timecards';\r\nimport { useHistory } from 'react-router-dom';\r\nimport DatePicker from 'react-mobile-datepicker';\r\n\r\n\r\nconst AddDataForm = ({ login, currentAddress, timecards, dispatch }) => {\r\n\tlet history = useHistory();\r\n\r\n\tconst [{ isLoading }, setisLoading] = useState({ isLoading: true });\r\n\tconst [{ startTimeInput }, setstartTimeInput] = useState({ startTimeInput: new Date() });\r\n\tconst [{ endTimeInput }, setendTimeInput] = useState({ endTimeInput: new Date() });\r\n\tconst [{ errors }, seterrors] = useState({ errors: {} });\r\n\tconst [{ hideForms }, sethideForms] = useState({ hideForms: true });\r\n\tconst [{ startTimePickerIsOpen }, setstartTimePickerIsOpen] = useState({ startTimePickerIsOpen: false });\r\n\tconst [{ endTimePickerIsOpen }, setendTimePickerIsOpen] = useState({ endTimePickerIsOpen: false });\r\n\r\n\tuseEffect(() => {\r\n\t\tif (currentAddress.projectId !== null)\r\n\t\t\t!currentAddress.loading && setisLoading({ isLoading: false });\r\n\t}, [currentAddress])\r\n\r\n\tuseEffect(() => { !isLoading && sethideForms({ hideForms: false }); }, [currentAddress, isLoading])\r\n\tuseEffect(() => { currentAddress && localStorage.setItem('currentAddress', JSON.stringify(currentAddress)) }, [currentAddress]);\r\n\tuseEffect(() => {\r\n\t\tconst findingError = timecards.find(timecard => Object.keys(timecard).includes('error'));\r\n\t\tconst hasError = findingError === undefined ? false : true;\r\n\r\n\t\tif (!isLoading && !hasError) history.push(\"/recordoverview\");\r\n\r\n\t\tif (hasError) {\r\n\t\t\tconst savedErrors = { ...errors };\r\n\t\t\tsavedErrors['startTimeInput'] = findingError.error;\r\n\t\t\tsavedErrors['endTimeInput'] = findingError.error;\r\n\t\t\tseterrors({ errors: savedErrors })\r\n\t\t}\r\n\r\n\t}, [timecards])\r\n\r\n\tfunction handleStartTimeChange(e) {\r\n\t\tsetstartTimeInput({ startTimeInput: e.target.value })\r\n\t}\r\n\tfunction handleEndTimeChange(e) {\r\n\t\tsetendTimeInput({ endTimeInput: e.target.value })\r\n\t}\r\n\r\n\tfunction handleSelectStartTime(time) {\r\n\t\tsetstartTimePickerIsOpen({ startTimePickerIsOpen: false });\r\n\t\t// settime({ time });\r\n\t\tsetstartTimeInput({ startTimeInput: time })\r\n\t}\r\n\tfunction handleSelectEndTime(time) {\r\n\t\tsetendTimePickerIsOpen({ endTimePickerIsOpen: false });\r\n\t\t// settime({ time });\r\n\t\tsetendTimeInput({ endTimeInput: time })\r\n\t}\r\n\tfunction handleClick(timeType) {\r\n\t\tif (timeType === 'start') {\r\n\t\t\tinputRefStart.current.blur();\r\n\t\t\tsetstartTimePickerIsOpen({ startTimePickerIsOpen: true })\r\n\t\t};\r\n\t\tif (timeType === 'end') {\r\n\t\t\tinputRefEnd.current.blur();\r\n\t\t\tsetendTimePickerIsOpen({ endTimePickerIsOpen: true })\r\n\t\t};\r\n\t}\r\n\tfunction handleCancelTimePicker(timeType) {\r\n\t\tif (timeType === 'start') setstartTimePickerIsOpen({ startTimePickerIsOpen: false });\r\n\t\tif (timeType === 'end') setendTimePickerIsOpen({ endTimePickerIsOpen: false });\r\n\t}\r\n\r\n\r\n\tfunction emptyInputs() {\r\n\t\tsetstartTimeInput({ startTimeInput: '' })\r\n\t\tsetendTimeInput({ endTimeInput: '' })\r\n\t}\r\n\tfunction dateToday() {\r\n\t\tconst now = new Date();\r\n\t\tconst timezoneCorrectedNow = new Date(now - now.getTimezoneOffset() * 60000)\r\n\t\tconst formattedDate = timezoneCorrectedNow.toJSON().split(\"T\")[0];\r\n\t\treturn formattedDate;\r\n\t}\r\n\tfunction totalHours(startTime, endTime) {\r\n\t\tlet msHour = 60 * 60 * 1000,\r\n\t\t\tmsDay = 60 * 60 * 24 * 1000;\r\n\t\tconst start = new Date(startTime);\r\n\t\tconst end = new Date(endTime);\r\n\t\tconst hours = Math.floor(((end - start) % msDay) / msHour)\r\n\t\treturn hours;\r\n\t}\r\n\r\n\tfunction totalMinutes(startTime, endTime) {\r\n\t\tlet msMinute = 60 * 1000,\r\n\t\t\tmsDay = 60 * 60 * 24 * 1000;\r\n\t\tconst start = new Date(startTime);\r\n\t\tconst end = new Date(endTime);\r\n\t\tconst minutes = Math.floor(((end - start) % msDay) / msMinute) % 60;\r\n\r\n\t\treturn minutes;\r\n\t}\r\n\r\n\tfunction totalTime(formatted = false) {\r\n\t\tconst hours = totalHours(startTimeInput, endTimeInput);\r\n\t\tconst minutes = totalMinutes(startTimeInput, endTimeInput);\r\n\t\tconst timeFormat = (hours, minutes) => (`${Math.floor(hours)}h ${Math.abs(minutes)}min`);\r\n\t\tconst readyToReturn = endTimeInput !== '' && startTimeInput !== '';\r\n\r\n\t\tconst decimalMin = minutes / 60;\r\n\t\tconst decimalTime = +(decimalMin + hours).toPrecision(3);\r\n\r\n\t\tif (formatted) {\r\n\t\t\tif (readyToReturn) return timeFormat(hours, minutes);\r\n\t\t\telse return timeFormat(0, 0);\r\n\t\t} else {\r\n\t\t\treturn decimalTime;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction doSubmit() {\r\n\t\tconst hasInputValue = totalHours(startTimeInput, endTimeInput) !== 0;\r\n\r\n\t\tif (hasInputValue) {\r\n\t\t\tdispatch(actions.apiCallBegan({// TODO ...and here - dispatch(PostUserTimecards());\r\n\r\n\t\t\t\turl: \"/v1/timecard\",\r\n\t\t\t\tmethod: \"post\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tuserId: login.userId,\r\n\t\t\t\t\tprojectId: currentAddress.projectId,\r\n\t\t\t\t\tdate: dateToday(),\r\n\t\t\t\t\thours: totalTime()\r\n\t\t\t\t},\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tsession: login.session\r\n\t\t\t\t},\r\n\t\t\t\tonError: \"timecards/error\"\r\n\t\t\t}));\r\n\r\n\t\t\tdispatch(actions.apiCallBegan({ // TODO ...and here - dispatch(loadUserTimecards());\r\n\t\t\t\turl: \"/v1/user/hours\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tsession: login.session\r\n\t\t\t\t},\r\n\t\t\t\tonSuccess: \"timecards/timecardsReceived\"\r\n\t\t\t}));\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// emptyInputs();\r\n\r\n\t\t// history.push(\"/recordoverview\");\r\n\t}\r\n\r\n\tconst schema = {\r\n\t\tstartTimeInput: Joi.date().iso().required().error(err => {\r\n\t\t\treturn { message: errorMessagePerType(err[0], 'Start Time') }\r\n\t\t}),\r\n\t\tendTimeInput: Joi.date().iso().required().error(err => {\r\n\t\t\treturn { message: errorMessagePerType(err[0], 'End Time') }\r\n\t\t})\r\n\t}\r\n\r\n\tfunction validate() {\r\n\t\tconst options = { abortEarly: false };\r\n\t\tconst fields = {\r\n\t\t\t...{ startTimeInput },\r\n\t\t\t...{ endTimeInput }\r\n\t\t};\r\n\r\n\t\tconst { error } = Joi.validate(fields, schema, options);\r\n\t\tif (!error) return null;\r\n\r\n\t\tconst errors = {};\r\n\r\n\t\tfor (let item of error.details)\r\n\t\t\terrors[item.path[0]] = item.message;\r\n\t\treturn errors;\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault() // stops default reloading behaviour\r\n\r\n\t\tconst allErrors = validate();\r\n\t\tseterrors({ errors: allErrors || {} });\r\n\t\tif (allErrors) return;\r\n\r\n\t\tdoSubmit();\r\n\t}\r\n\r\n\tfunction hide() {\r\n\t\treturn { display: 'none' }\r\n\t}\r\n\r\n\tconst datePickerSettings = {\r\n\t\ttheme: 'ios',\r\n\t\tconfirmText: 'Set',\r\n\t\tcancelText: 'Cancel',\r\n\t\tshowCaption: true,\r\n\t\theaderFormat: 'YYYY-MM-DD',\r\n\t\tdateConfig: {\r\n\t\t\t'hour': {\r\n\t\t\t\tformat: 'hh',\r\n\t\t\t\tcaption: 'Hour',\r\n\t\t\t\tstep: 1,\r\n\t\t\t},\r\n\t\t\t'minute': {\r\n\t\t\t\tformat: 'mm',\r\n\t\t\t\tcaption: 'Min',\r\n\t\t\t\tstep: 1,\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tfunction getTimeFormat(current_datetime) {\r\n\t\tconst minutes = (current_datetime.getMinutes() < 10 ? '0' : '') + current_datetime.getMinutes();\r\n\t\tconst hours = (current_datetime.getHours() < 10 ? '0' : '') + current_datetime.getHours();\r\n\t\treturn hours + \":\" + minutes;\r\n\t}\r\n\r\n\tconst inputRefStart = useRef(null);\r\n\tconst inputRefEnd = useRef(null);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<DatePicker\r\n\t\t\t\tvalue={startTimeInput}\r\n\t\t\t\tisOpen={startTimePickerIsOpen}\r\n\t\t\t\tonSelect={handleSelectStartTime}\r\n\t\t\t\tonCancel={() => handleCancelTimePicker('start')}\r\n\t\t\t\t{...datePickerSettings} />\r\n\t\t\t<DatePicker\r\n\t\t\t\tvalue={endTimeInput}\r\n\t\t\t\tisOpen={endTimePickerIsOpen}\r\n\t\t\t\tonSelect={handleSelectEndTime}\r\n\t\t\t\tonCancel={() => handleCancelTimePicker('end')}\r\n\t\t\t\t{...datePickerSettings} />\r\n\t\t\t<FormWrapper>\r\n\t\t\t\t<FormContent style={hideForms ? hide() : null}>\r\n\t\t\t\t\t<Form onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<FormLabel htmlFor='for'>Start Time</FormLabel>\r\n\r\n\t\t\t\t\t\t\t<FormInput\r\n\t\t\t\t\t\t\t\tonClick={() => { scrollDownTo(\".scrollHere\"); handleClick('start'); }}\r\n\t\t\t\t\t\t\t\tonChange={handleStartTimeChange}\r\n\t\t\t\t\t\t\t\tvalue={getTimeFormat(startTimeInput)}\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\thasErrors={errors['startTimeInput']}\r\n\t\t\t\t\t\t\t\tref={inputRefStart}\r\n\t\t\t\t\t\t\t\trequired />\r\n\t\t\t\t\t\t\t{errors['startTimeInput'] && <ErrorMessage>{errors['startTimeInput']}</ErrorMessage>}\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<FormLabel htmlFor='for'>End Time</FormLabel>\r\n\t\t\t\t\t\t\t<FormInput\r\n\t\t\t\t\t\t\t\tonClick={() => { handleClick('end'); }}\r\n\t\t\t\t\t\t\t\tonChange={handleEndTimeChange}\r\n\t\t\t\t\t\t\t\tvalue={getTimeFormat(endTimeInput)}\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tref={inputRefEnd}\r\n\t\t\t\t\t\t\t\thasErrors={errors['endTimeInput']}\r\n\t\t\t\t\t\t\t\trequired />\r\n\t\t\t\t\t\t\t{errors['endTimeInput'] && <ErrorMessage>{errors['endTimeInput']}</ErrorMessage>}\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t<DisplayLabel>Total</DisplayLabel>\r\n\t\t\t\t\t\t<TotalHoursDisplay>\r\n\t\t\t\t\t\t\t{totalTime(true)}\r\n\t\t\t\t\t\t</TotalHoursDisplay>\r\n\t\t\t\t\t\t<FormButton>DONE</FormButton>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</FormContent>\r\n\t\t\t</FormWrapper>\r\n\t\t\t<ScrollAnchor className={'scrollHere'} />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state) =>\r\n({\r\n\tlogin: getLoginData(state),\r\n\tcurrentAddress: getcurrentAddress(state),\r\n\ttimecards: getTimecardArray(state),\r\n})\r\n\r\n\r\n// mapStateToProps takes state of the store and returns the part you are interested in:\r\n// the properties of this object will end up as props of our componennt\r\nexport default connect(mapStateToProps)(AddDataForm);",["217","218"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\login.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Checkbox\\CheckboxElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\addEntry.js",["219","220","221","222","223","224","225","226","227","228","229","230"],"import React, { useState } from 'react'\r\nimport { ActionButton, Container } from '../components/common/commonElements';\r\nimport Navbar from '../components/Navbar'\r\nimport SelectUsers from '../components/SelectUsers';\r\nimport Sidebar from '../components/Sidebar'\r\nimport ModeSwitcher from '../components/ModeSwitcher/index';\r\nimport { connect } from 'react-redux';\r\nimport { getUsersArray, userRemoved } from '../Store/slices/users';\r\nimport { getProjectArray, projectRemoved } from '../Store/slices/projects';\r\nimport { currentAddressChanged, getcurrentAddress } from '../Store/slices/currentAddress';\r\nimport { currentContractorChanged, getcurrentContractor } from '../Store/slices/currentContractor';\r\nimport { getcurrentModeIndex } from '../Store/slices/currentModeIndex';\r\nimport Modal from '../components/Modal';\r\nimport { getTimecardArray, timecardsOfUserRemoved, timecardsOfProjectRemoved } from '../Store/slices/timecards';\r\nimport * as actions from '../Store/api';\r\nimport { companyConfig } from '../services/companyConfig';\r\nimport { getLoginData } from '../Store/slices/login';\r\nimport AddEntryForm from '../components/AddEntryForm';\r\n\r\n\r\nconst AddEntry = ({ dispatch, projects, users, currentAddress, currentContractor, currentModeIndex, login }) => {\r\n\tconst [{ isOpen }, setIsOpen] = useState({ isOpen: false });\r\n\tconst toggle = () => setIsOpen({ isOpen: !isOpen });\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Sidebar isOpen={isOpen} toggle={toggle} isAdmin={false} />\r\n\t\t\t<Navbar toggle={toggle} />\r\n\t\t\t{/* <h1>Choose an Object</h1> */}\r\n\t\t\t<SelectUsers labelText={'Time spent in:'} />\r\n\t\t\t<AddEntryForm />\r\n\t\t\t{/*TODO Add animated notification - 'name' erased  */}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state) =>\r\n({\r\n\tprojects: getProjectArray(state),\r\n\tusers: getUsersArray(state),\r\n\ttimeCards: getTimecardArray(state),\r\n\t// monthIndex: getMonthIndex(state),\r\n\tcurrentAddress: getcurrentAddress(state),\r\n\tcurrentContractor: getcurrentContractor(state),\r\n\tcurrentModeIndex: getcurrentModeIndex(state),\r\n\tlogin: getLoginData(state),\r\n})\r\n\r\n\r\n// mapStateToProps takes state of the store and returns the part you are interested in:\r\n// the properties of this object will end up as props of our componennt\r\nexport default connect(mapStateToProps)(AddEntry);",["231","232"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\login.js",[],["233","234"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\ContentSection\\index.js",["235","236","237","238","239","240","241"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\DropdownMenu\\index.js",[],["242","243"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\users.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\SelectUsers\\index.js",["244"],"import React, { useEffect } from 'react'\r\nimport { SelecUsersContainer, DropdownLabel } from './SelectUsersElements';\r\nimport Dropdown from 'react-dropdown';\r\nimport '../../Styles/dropdown.css'\r\nimport { connect } from 'react-redux';\r\nimport { getcurrentModeIndex } from '../../Store/slices/currentModeIndex';\r\nimport { currentAddressChanged, getcurrentAddress } from '../../Store/slices/currentAddress';\r\nimport { currentContractorChanged, getcurrentContractor } from '../../Store/slices/currentContractor';\r\nimport { getProjectArray } from '../../Store/slices/projects';\r\nimport { getUsersArray } from '../../Store/slices/users';\r\nimport { gettotalTime } from '../../Store/slices/totalTime';\r\n\r\nfunction SelectUsers(\r\n\t{\r\n\t\tisAdmin,\r\n\t\tcurrentModeIndex = isAdmin ? 1 : 0,\r\n\t\tprojects,\r\n\t\tusers,\r\n\t\tcurrentContractor,\r\n\t\tcurrentAddress,\r\n\t\tlistCardCount = [],\r\n\t\tdispatch,\r\n\t\tlabelText\r\n\t}) {\r\n\tconst addresses = projects.map(project => {\r\n\t\treturn { id: project.id, address: project.address, projectId: project.projectId }\r\n\t});\r\n\tconst firstMode = currentModeIndex === 0; // Project hours\r\n\tconst secondMode = currentModeIndex === 1; // Contractor hours\r\n\r\n\tfunction isLocalStored(name) {\r\n\t\tif (localStorage.getItem(name) === 'undefined') return false;\r\n\t\tif (localStorage.getItem(name)) return localStorage.getItem(name);\r\n\t\treturn false\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst firstAddress = typeof addresses[0] !== 'undefined' ? addresses[0].address : null;\r\n\t\tconst firstAddressId = typeof addresses[0] !== 'undefined' ? addresses[0].id : null;\r\n\t\tconst firstProjectId = typeof addresses[0] !== 'undefined' ? addresses[0].projectId : null;\r\n\t\tdispatch(currentAddressChanged({ id: firstAddressId, address: firstAddress, projectId: firstProjectId }));\r\n\t\tisLocalStored('currentAddress') && dispatch(currentAddressChanged(JSON.parse(isLocalStored('currentAddress'))));\r\n\t\tisLocalStored('currentContractor') && dispatch(currentContractorChanged(JSON.parse(isLocalStored('currentContractor'))));\r\n\t}, []);\r\n\r\n\tconst _onSelectAddress = event => dispatch(currentAddressChanged(\r\n\t\t{\r\n\t\t\tid: addresses.find(a => a.address === selectSrc(event.value, 'item')).id,\r\n\t\t\taddress: selectSrc(event.value, 'item'),\r\n\t\t\tprojectId: addresses.find(a => a.address === selectSrc(event.value, 'item')).projectId\r\n\t\t}));\r\n\tconst _onSelectContractor = event => {\r\n\t\tconst selectedContractor = users.find(user => user.name === selectSrc(event.value, 'item'));\r\n\t\tdispatch(currentContractorChanged(selectedContractor))\r\n\t}\r\n\r\n\tconst selectingDataMode = event => {\r\n\t\tif (currentModeIndex === 0) return _onSelectAddress(event);  // Project hours\r\n\t\tif (currentModeIndex === 1) return _onSelectContractor(event); // Contractor hours\r\n\t}\r\n\r\n\tfunction selectSrc(src, path) {\r\n\t\tconst exists = src => src !== undefined;\r\n\t\tconst sourceIsViable = src => exists(src);\r\n\t\treturn sourceIsViable(src) ? src.props[path] : []\r\n\t};\r\n\r\n\tfunction savedChosenOption() {\r\n\t\tfunction address() { return contentListPerMode(currentModeIndex).find(address => selectSrc(address, 'item') === currentAddress.address) }; //TODO simplify this after I put dispatch of changing currentAddress / contractor\r\n\t\tfunction contractor() { return contentListPerMode(currentModeIndex).find(name => selectSrc(name, 'item') === currentContractor.name); }\r\n\r\n\t\tif (firstMode) return selectSrc(address(), 'item').length > 0 ?\r\n\t\t\tselectSrc(address(), 'item') :\r\n\t\t\tprojects.length > 0 ?\r\n\t\t\t\tprojects[0].address : null;\r\n\t\tif (secondMode) return selectSrc(contractor(), 'item').length > 0 ?\r\n\t\t\tselectSrc(contractor(), 'item') :\r\n\t\t\tusers.length > 0 ?\r\n\t\t\t\tusers[0].name : null;\r\n\t}\r\n\r\n\tfunction contentListPerMode(mode) {\r\n\t\tlet result = [];\r\n\t\tconst listIsEmpty = listCardCount.length === 0;\r\n\t\tconst countStyle = {\r\n\r\n\t\t\tfontSize: '0.7em',\r\n\t\t\tbackground: '#e2e2e2',\r\n\t\t\tpadding: '3px 4px',\r\n\t\t\tborderRadius: '6px',\r\n\t\t\tmarginLeft: '15px'\r\n\t\t};\r\n\t\tfunction Counter({ children, count }) {\r\n\t\t\treturn <span style={{\r\n\t\t\t\t...countStyle,\r\n\t\t\t\tcolor: count > 0 ? '#484848' : '#aaaaaa'\r\n\t\t\t}\r\n\t\t\t}>{children}</span>;\r\n\t\t}\r\n\t\tfunction ListItem({ item, count }) {\r\n\t\t\tif (listIsEmpty) return <React.Fragment>{item}</React.Fragment>;\r\n\t\t\telse return <React.Fragment>{item} <Counter count={count}>{count}</Counter></React.Fragment>;\r\n\t\t}\r\n\r\n\r\n\r\n\t\tswitch (mode) {\r\n\r\n\t\t\tcase 0:\r\n\t\t\t\tresult = addresses.map((a, index) => {\r\n\t\t\t\t\tconst address = a.address;\r\n\t\t\t\t\tconst count = listCardCount[index];\r\n\r\n\t\t\t\t\t// if (index > 0)\r\n\t\t\t\t\treturn <ListItem key={`${address}-${a.projectId}`} item={address} count={count} />;\r\n\t\t\t\t\t// else\r\n\t\t\t\t\t// \treturn <></>;\r\n\t\t\t\t}\r\n\t\t\t\t).filter(a => a.props.hasOwnProperty('item'));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 1:\r\n\t\t\t\tresult = users.map((user, index) => {\r\n\t\t\t\t\tconst name = user.name;\r\n\t\t\t\t\tconst count = listCardCount[index];\r\n\t\t\t\t\treturn <ListItem key={`${name}-${user.id}`} item={name} count={count} />;\r\n\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<SelecUsersContainer>\r\n\t\t\t{labelText ? <DropdownLabel>{labelText}</DropdownLabel> : null}\r\n\t\t\t<Dropdown\r\n\t\t\t\toptions={contentListPerMode(currentModeIndex)}\r\n\t\t\t\tonChange={event => { selectingDataMode(event) }}\r\n\t\t\t\tvalue={savedChosenOption()}\r\n\t\t\t\tmenuClassName='menuClass'\r\n\t\t\t\tclassName='menuClass'\r\n\t\t\t\tplaceholderClassName='menuClass'\r\n\t\t\t\tcontrolClassName='controlClass'\r\n\t\t\t\tarrowClosed={<span className=\"arrow-closed\" />}\r\n\t\t\t\tarrowOpen={<span className=\"arrow-open\" />} />\r\n\t\t</SelecUsersContainer>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = state =>\r\n({\r\n\tprojects: getProjectArray(state),\r\n\tusers: getUsersArray(state),\r\n\tcurrentAddress: getcurrentAddress(state),\r\n\tcurrentContractor: getcurrentContractor(state),\r\n\tcurrentModeIndex: getcurrentModeIndex(state),\r\n\ttotalTime: gettotalTime(state)\r\n})\r\n\r\n\r\n// mapStateToProps takes state of the store and returns the part you are interested in:\r\n// the properties of this object will end up as props of our componennt\r\nexport default connect(mapStateToProps)(SelectUsers);\r\n",["245","246"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\DropdownMenu\\dropdownMenuElements.js",[],["247","248"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\monthIndex.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Modal\\ModalElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\AddDataForm\\index.js",["249","250","251"],"import React, { useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { getcurrentModeIndex } from '../../Store/slices/currentModeIndex';\r\nimport { projectAdded } from '../../Store/slices/projects';\r\nimport { userAdded } from '../../Store/slices/users';\r\nimport Joi from 'joi-browser';\r\nimport { FormInput, FormWrapper, FormButton, FormContent, Form, FormH1, FormLabel, ScrollAnchor, ErrorMessage } from './AddDataFormElements';\r\nimport { companyConfig } from '../../services/companyConfig';\r\nimport * as actions from '../../Store/api';\r\nimport { getLoginData } from '../../Store/slices/login';\r\n\r\n\r\nconst AddDataForm = ({ currentModeIndex, login, dispatch }) => {\r\n\tconst dataType = ['Project', 'Contractor'][currentModeIndex];\r\n\tconst FIRST_MODE = currentModeIndex === 0;\r\n\tconst SECOND_MODE = currentModeIndex === 1;\r\n\r\n\tconst [{ nameInput }, setnameInput] = useState({ nameInput: '' });\r\n\tconst [{ emailInput }, setemailInput] = useState({ emailInput: '' });\r\n\tconst [{ addressInput }, setaddressInput] = useState({ addressInput: '' });\r\n\tconst [{ passwordInput }, setpasswordInput] = useState({ passwordInput: '' });\r\n\tconst [{ errors }, seterrors] = useState({ errors: {} });\r\n\r\n\tfunction handleNameChange(e) {\r\n\t\tsetnameInput({ nameInput: e.target.value })\r\n\t}\r\n\tfunction handleEmailChange(e) {\r\n\t\tsetemailInput({ emailInput: e.target.value })\r\n\t}\r\n\tfunction handleAddressChange(e) {\r\n\t\tsetaddressInput({ addressInput: e.target.value })\r\n\t}\r\n\tfunction handlePasswordChange(e) {\r\n\t\tsetpasswordInput({ passwordInput: e.target.value })\r\n\t}\r\n\tfunction emptyInputs() {\r\n\t\tsetnameInput({ nameInput: '' })\r\n\t\tsetemailInput({ emailInput: '' })\r\n\t\tsetaddressInput({ addressInput: '' })\r\n\t\tsetpasswordInput({ passwordInput: '' })\r\n\t}\r\n\tfunction doSubmit() {\r\n\t\tif (FIRST_MODE) dispatch(actions.apiCallBegan({\r\n\t\t\turl: \"/v1/project\",\r\n\t\t\tmethod: \"post\",\r\n\t\t\tdata: {\r\n\t\t\t\tcompanyId: process.env.REACT_APP_COMPANY_ID,\r\n\t\t\t\tname: nameInput,\r\n\t\t\t\taddress: addressInput,\r\n\t\t\t\tactive: true\r\n\t\t\t},\r\n\t\t\theaders: {\r\n\t\t\t\tsession: login.session\r\n\t\t\t},\r\n\t\t\tonSuccess: \"projects/projectReceived\" //TODO adjust app to get rid of \"name\" and \"address\" fields in the API response\r\n\t\t}));\r\n\t\tif (SECOND_MODE) dispatch(actions.apiCallBegan({\r\n\t\t\turl: \"/v1/user\",\r\n\t\t\tmethod: \"post\",\r\n\t\t\tdata: {\r\n\t\t\t\tcompanyId: process.env.REACT_APP_COMPANY_ID,\r\n\t\t\t\tfullName: nameInput,\r\n\t\t\t\temail: emailInput,\r\n\t\t\t\tpassword: passwordInput,\r\n\t\t\t\trole: \"employee\"\r\n\t\t\t},\r\n\t\t\theaders: {\r\n\t\t\t\tsession: login.session\r\n\t\t\t},\r\n\t\t\tonSuccess: \"users/userReceived\" //TODO adjust app to get rid of \"name\" field in the API response\r\n\t\t}));\r\n\r\n\t\t// dispatch(actions.apiCallBegan);\r\n\r\n\t\temptyInputs();\r\n\t}\r\n\r\n\r\n\r\n\tconst firstModeSchema = {\r\n\t\tnameInput: Joi.string().regex(/^[a-zA-Z0-9ÆæØøÅåĀāĒēĪīŪūĻļĶķŠšČčŅņ\\-,._ ]+$/).min(3).max(30).required().error(err => {\r\n\t\t\treturn { message: errorMessagePerType(err[0], 'Building Name') }\r\n\t\t}),\r\n\t\taddressInput: Joi.string().regex(/^[a-zA-Z0-9ÆæØøÅåĀāĒēĪīŪūĻļĶķŠšČčŅņ\\-,._ ]+$/).min(3).max(30).required().error(err => {\r\n\t\t\treturn { message: errorMessagePerType(err[0], 'Address') }\r\n\t\t})\r\n\t}\r\n\tconst secondModeSchema = {\r\n\t\tnameInput: Joi.string().regex(/^[a-zA-Z0-9ÆæØøÅåĀāĒēĪīŪūĻļĶķŠšČčŅņ\\-,._ ]+$/).min(3).max(30).required().error(err => {\r\n\t\t\treturn { message: errorMessagePerType(err[0], 'Name') }\r\n\t\t}),\r\n\t\temailInput: Joi.string().email({ tlds: { allow: false } }).required().error(err => {\r\n\t\t\treturn { message: errorMessagePerType(err[0], 'Email') }\r\n\t\t}),\r\n\t\tpasswordInput: Joi.string().regex(/^[a-zA-Z0-9ÆæØøÅåĀāĒēĪīŪūĻļĶķŠšČčŅņ\\-_ !]+$/).min(3).max(16).required().error(err => {\r\n\t\t\treturn { message: errorMessagePerType(err[0], 'Password') }\r\n\t\t})\r\n\t}\r\n\r\n\tfunction validate() {\r\n\t\tconst options = { abortEarly: false };\r\n\t\tconst firstModeFields = {\r\n\t\t\t...{ addressInput },\r\n\t\t\t...{ nameInput }\r\n\t\t};\r\n\t\tconst secondModeFields = {\r\n\t\t\t...{ nameInput },\r\n\t\t\t...{ emailInput },\r\n\t\t\t...{ passwordInput }\r\n\t\t};\r\n\r\n\t\tconst fieldSwitcher = () => {\r\n\t\t\tif (FIRST_MODE) return firstModeFields;\r\n\t\t\tif (SECOND_MODE) return secondModeFields;\r\n\t\t}\r\n\t\tconst schemaSwitcher = () => {\r\n\t\t\tif (FIRST_MODE) return firstModeSchema;\r\n\t\t\tif (SECOND_MODE) return secondModeSchema;\r\n\t\t}\r\n\r\n\t\tconst { error } = Joi.validate(fieldSwitcher(), schemaSwitcher(), options);\r\n\t\tif (!error) return null;\r\n\r\n\t\tconst errors = {};\r\n\r\n\t\tfor (let item of error.details)\r\n\t\t\terrors[item.path[0]] = item.message;\r\n\t\treturn errors;\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault() // stops default reloading behaviour\r\n\r\n\t\tconst allErrors = validate();\r\n\t\tseterrors({ errors: allErrors || {} });\r\n\t\tif (allErrors) return;\r\n\r\n\t\tdoSubmit();\r\n\t}\r\n\r\n\tfunction ONLY_FIRSTMODE_MODULES() {\r\n\t\tif (FIRST_MODE)\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<FormLabel htmlFor='for'>Address</FormLabel>\r\n\t\t\t\t\t<FormInput\r\n\t\t\t\t\t\tonClick={() => scrollDownTo(\".scrollHere\")}\r\n\t\t\t\t\t\tonChange={handleAddressChange}\r\n\t\t\t\t\t\tvalue={addressInput}\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\thasErrors={errors['addressInput']}\r\n\t\t\t\t\t\trequired />\r\n\t\t\t\t\t{errors['addressInput'] && <ErrorMessage>{errors['addressInput']}</ErrorMessage>}\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t}\r\n\tfunction ONLY_SECONDMODE_MODULES() {\r\n\t\tif (SECOND_MODE)\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<FormLabel htmlFor='for'>Email</FormLabel>\r\n\t\t\t\t\t<FormInput\r\n\t\t\t\t\t\tonClick={() => scrollDownTo(\".scrollHere\")}\r\n\t\t\t\t\t\tonChange={handleEmailChange}\r\n\t\t\t\t\t\tvalue={emailInput}\r\n\t\t\t\t\t\ttype='email'\r\n\t\t\t\t\t\thasErrors={errors['emailInput']}\r\n\t\t\t\t\t\trequired />\r\n\t\t\t\t\t{errors['emailInput'] && <ErrorMessage>{errors['emailInput']}</ErrorMessage>}\r\n\t\t\t\t\t<FormLabel htmlFor='for'>Password</FormLabel>\r\n\t\t\t\t\t<FormInput\r\n\t\t\t\t\t\tonClick={() => scrollDownTo(\".scrollHere\")}\r\n\t\t\t\t\t\tonChange={handlePasswordChange}\r\n\t\t\t\t\t\tvalue={passwordInput}\r\n\t\t\t\t\t\ttype='password'\r\n\t\t\t\t\t\thasErrors={errors['passwordInput']}\r\n\t\t\t\t\t\trequired />\r\n\t\t\t\t\t{errors['passwordInput'] && <ErrorMessage>{errors['passwordInput']}</ErrorMessage>}\r\n\t\t\t\t</>\r\n\t\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<FormWrapper>\r\n\t\t\t\t<FormContent >\r\n\t\t\t\t\t<Form onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t<FormH1>Add New {dataType}</FormH1>\r\n\t\t\t\t\t\t{ONLY_FIRSTMODE_MODULES()}\r\n\t\t\t\t\t\t<FormLabel htmlFor='for'>{FIRST_MODE && 'Building'} Name</FormLabel>\r\n\t\t\t\t\t\t<FormInput\r\n\t\t\t\t\t\t\tonChange={handleNameChange}\r\n\t\t\t\t\t\t\tvalue={nameInput}\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\thasErrors={errors['nameInput']}\r\n\t\t\t\t\t\t\trequired />\r\n\t\t\t\t\t\t{errors['nameInput'] && <ErrorMessage>{errors['nameInput']}</ErrorMessage>}\r\n\t\t\t\t\t\t{ONLY_SECONDMODE_MODULES()}\r\n\t\t\t\t\t\t<FormButton>Add</FormButton>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</FormContent>\r\n\t\t\t</FormWrapper>\r\n\t\t\t<ScrollAnchor className={'scrollHere'} />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state) =>\r\n({\r\n\tcurrentModeIndex: getcurrentModeIndex(state),\r\n\tlogin: getLoginData(state)\r\n})\r\n\r\n\r\n// mapStateToProps takes state of the store and returns the part you are interested in:\r\n// the properties of this object will end up as props of our componennt\r\nexport default connect(mapStateToProps)(AddDataForm);\r\n\r\n\r\nexport function scrollDownTo(cssQuerry) {\r\n\tsetTimeout(() => {\r\n\t\tdocument.querySelector(cssQuerry) && document.querySelector(cssQuerry).scrollIntoView(false);\r\n\t}, 200);\r\n}\r\nexport function errorMessagePerType(error, fieldName) {\r\n\tlet result = '';\r\n\r\n\tswitch (error.type) {\r\n\t\tcase \"any.empty\":\r\n\t\t\tresult = `${fieldName} should not be empty!`;\r\n\t\t\tbreak;\r\n\t\tcase \"string.min\":\r\n\t\t\tresult = `${fieldName} should have at least ${error.context.limit} characters!`;\r\n\t\t\tbreak;\r\n\t\tcase \"string.max\":\r\n\t\t\tresult = `${fieldName} should have at most ${error.context.limit} characters!`;\r\n\t\t\tbreak;\r\n\t\tcase \"string.regex.base\":\r\n\t\t\tresult = `${fieldName} contains wrong symbols!`;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\treturn result;\r\n};","D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Navbar\\NavbarElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\recordOverview.js",["252"],"import React, { useEffect, useState } from 'react'\r\nimport Sidebar from '../components/Sidebar';\r\nimport Navbar from '../components/Navbar';\r\nimport ControlPanelSection from '../components/ControlPanelSection';\r\nimport { connect } from 'react-redux';\r\nimport ContentSection from '../components/ContentSection/index';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as actions from '../Store/api';\r\nimport { getLoginData } from '../Store/slices/login';\r\n\r\nfunction RecordOverview({ dispatch, login }) {\r\n\tlet history = useHistory();\r\n\tconst [{ isOpen }, setIsOpen] = useState({ isOpen: false });\r\n\tconst toggle = () => {\r\n\t\tsetIsOpen({ isOpen: !isOpen })\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(actions.apiCallBegan({ // TODO ...and here - dispatch(loadUserTimecards());\r\n\t\t\turl: \"/v1/user/hours\",\r\n\t\t\theaders: {\r\n\t\t\t\tsession: login.session\r\n\t\t\t},\r\n\t\t\tonSuccess: \"timecards/timecardsReceived\"\r\n\t\t}));\r\n\t}, [history]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Sidebar isOpen={isOpen} toggle={toggle} isAdmin={false} />\r\n\t\t\t<Navbar toggle={toggle} />\r\n\t\t\t<ControlPanelSection isAdmin={false} />\r\n\t\t\t<ContentSection isAdmin={false} />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state) =>\r\n({\r\n\tlogin: getLoginData(state),\r\n})\r\n\r\n\r\n// mapStateToProps takes state of the store and returns the part you are interested in:\r\n// the properties of this object will end up as props of our componennt\r\nexport default connect(mapStateToProps)(RecordOverview);",["253","254"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\projects.js",[],["255","256"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\AddEntryForm\\AddEntryFormElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\SelectUsers\\SelectUsersElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\admin.js",[],["257","258"],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\PrintContent\\PrintContentElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\AddDataForm\\AddDataFormElements.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\PrintContent\\index.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\components\\Modal\\index.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\slices\\totalTime.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\Store\\configureStore.js",[],"D:\\wamp64\\www\\sidnabyg\\jobbler\\app\\src\\pages\\printReport.js",[],{"ruleId":"259","severity":1,"message":"260","line":3,"column":60,"nodeType":"261","messageId":"262","endLine":3,"endColumn":71},{"ruleId":"259","severity":1,"message":"263","line":7,"column":10,"nodeType":"261","messageId":"262","endLine":7,"endColumn":22},{"ruleId":"259","severity":1,"message":"264","line":8,"column":10,"nodeType":"261","messageId":"262","endLine":8,"endColumn":19},{"ruleId":"259","severity":1,"message":"265","line":9,"column":28,"nodeType":"261","messageId":"262","endLine":9,"endColumn":41},{"ruleId":"259","severity":1,"message":"266","line":15,"column":10,"nodeType":"261","messageId":"262","endLine":15,"endColumn":23},{"ruleId":"267","severity":1,"message":"268","line":31,"column":5,"nodeType":"269","endLine":31,"endColumn":7,"suggestions":"270"},{"ruleId":"267","severity":1,"message":"271","line":36,"column":5,"nodeType":"269","endLine":36,"endColumn":12,"suggestions":"272"},{"ruleId":"267","severity":1,"message":"273","line":68,"column":5,"nodeType":"269","endLine":68,"endColumn":28,"suggestions":"274"},{"ruleId":"267","severity":1,"message":"273","line":100,"column":5,"nodeType":"269","endLine":100,"endColumn":40,"suggestions":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","replacedBy":"279"},{"ruleId":"276","replacedBy":"280"},{"ruleId":"278","replacedBy":"281"},{"ruleId":"259","severity":1,"message":"282","line":20,"column":24,"nodeType":"261","messageId":"262","endLine":20,"endColumn":32},{"ruleId":"259","severity":1,"message":"283","line":49,"column":23,"nodeType":"261","messageId":"262","endLine":49,"endColumn":34},{"ruleId":"267","severity":1,"message":"284","line":64,"column":7,"nodeType":"269","endLine":64,"endColumn":48,"suggestions":"285"},{"ruleId":"267","severity":1,"message":"286","line":75,"column":5,"nodeType":"269","endLine":75,"endColumn":7,"suggestions":"287"},{"ruleId":"267","severity":1,"message":"288","line":79,"column":97,"nodeType":"269","endLine":79,"endColumn":135,"suggestions":"289"},{"ruleId":"267","severity":1,"message":"288","line":80,"column":104,"nodeType":"269","endLine":80,"endColumn":148,"suggestions":"290"},{"ruleId":"259","severity":1,"message":"266","line":17,"column":10,"nodeType":"261","messageId":"262","endLine":17,"endColumn":23},{"ruleId":"276","replacedBy":"291"},{"ruleId":"278","replacedBy":"292"},{"ruleId":"276","replacedBy":"293"},{"ruleId":"278","replacedBy":"294"},{"ruleId":"276","replacedBy":"295"},{"ruleId":"278","replacedBy":"296"},{"ruleId":"276","replacedBy":"297"},{"ruleId":"278","replacedBy":"298"},{"ruleId":"276","replacedBy":"299"},{"ruleId":"278","replacedBy":"300"},{"ruleId":"276","replacedBy":"301"},{"ruleId":"278","replacedBy":"302"},{"ruleId":"259","severity":1,"message":"303","line":4,"column":65,"nodeType":"261","messageId":"262","endLine":4,"endColumn":71},{"ruleId":"267","severity":1,"message":"304","line":45,"column":5,"nodeType":"269","endLine":45,"endColumn":16,"suggestions":"305"},{"ruleId":"259","severity":1,"message":"306","line":80,"column":11,"nodeType":"261","messageId":"262","endLine":80,"endColumn":22},{"ruleId":"276","replacedBy":"307"},{"ruleId":"278","replacedBy":"308"},{"ruleId":"259","severity":1,"message":"309","line":2,"column":10,"nodeType":"261","messageId":"262","endLine":2,"endColumn":22},{"ruleId":"259","severity":1,"message":"310","line":2,"column":24,"nodeType":"261","messageId":"262","endLine":2,"endColumn":33},{"ruleId":"259","severity":1,"message":"311","line":6,"column":8,"nodeType":"261","messageId":"262","endLine":6,"endColumn":20},{"ruleId":"259","severity":1,"message":"312","line":8,"column":25,"nodeType":"261","messageId":"262","endLine":8,"endColumn":36},{"ruleId":"259","severity":1,"message":"313","line":9,"column":27,"nodeType":"261","messageId":"262","endLine":9,"endColumn":41},{"ruleId":"259","severity":1,"message":"314","line":10,"column":10,"nodeType":"261","messageId":"262","endLine":10,"endColumn":31},{"ruleId":"259","severity":1,"message":"315","line":11,"column":10,"nodeType":"261","messageId":"262","endLine":11,"endColumn":34},{"ruleId":"259","severity":1,"message":"316","line":13,"column":8,"nodeType":"261","messageId":"262","endLine":13,"endColumn":13},{"ruleId":"259","severity":1,"message":"317","line":14,"column":28,"nodeType":"261","messageId":"262","endLine":14,"endColumn":50},{"ruleId":"259","severity":1,"message":"318","line":14,"column":52,"nodeType":"261","messageId":"262","endLine":14,"endColumn":77},{"ruleId":"259","severity":1,"message":"319","line":15,"column":13,"nodeType":"261","messageId":"262","endLine":15,"endColumn":20},{"ruleId":"259","severity":1,"message":"266","line":16,"column":10,"nodeType":"261","messageId":"262","endLine":16,"endColumn":23},{"ruleId":"276","replacedBy":"320"},{"ruleId":"278","replacedBy":"321"},{"ruleId":"276","replacedBy":"322"},{"ruleId":"278","replacedBy":"323"},{"ruleId":"259","severity":1,"message":"324","line":2,"column":27,"nodeType":"261","messageId":"262","endLine":2,"endColumn":39},{"ruleId":"267","severity":1,"message":"288","line":42,"column":5,"nodeType":"269","endLine":42,"endColumn":16,"suggestions":"325"},{"ruleId":"267","severity":1,"message":"326","line":47,"column":5,"nodeType":"269","endLine":47,"endColumn":80,"suggestions":"327"},{"ruleId":"259","severity":1,"message":"328","line":53,"column":9,"nodeType":"261","messageId":"262","endLine":53,"endColumn":20},{"ruleId":"259","severity":1,"message":"329","line":68,"column":9,"nodeType":"261","messageId":"262","endLine":68,"endColumn":23},{"ruleId":"259","severity":1,"message":"330","line":89,"column":11,"nodeType":"261","messageId":"262","endLine":89,"endColumn":21},{"ruleId":"331","severity":1,"message":"332","line":178,"column":46,"nodeType":"333","messageId":"334","endLine":178,"endColumn":48},{"ruleId":"276","replacedBy":"335"},{"ruleId":"278","replacedBy":"336"},{"ruleId":"267","severity":1,"message":"337","line":44,"column":5,"nodeType":"269","endLine":44,"endColumn":7,"suggestions":"338"},{"ruleId":"276","replacedBy":"339"},{"ruleId":"278","replacedBy":"340"},{"ruleId":"276","replacedBy":"341"},{"ruleId":"278","replacedBy":"342"},{"ruleId":"259","severity":1,"message":"263","line":4,"column":10,"nodeType":"261","messageId":"262","endLine":4,"endColumn":22},{"ruleId":"259","severity":1,"message":"264","line":5,"column":10,"nodeType":"261","messageId":"262","endLine":5,"endColumn":19},{"ruleId":"259","severity":1,"message":"266","line":8,"column":10,"nodeType":"261","messageId":"262","endLine":8,"endColumn":23},{"ruleId":"267","severity":1,"message":"343","line":26,"column":5,"nodeType":"269","endLine":26,"endColumn":14,"suggestions":"344"},{"ruleId":"276","replacedBy":"345"},{"ruleId":"278","replacedBy":"346"},{"ruleId":"276","replacedBy":"347"},{"ruleId":"278","replacedBy":"348"},{"ruleId":"276","replacedBy":"349"},{"ruleId":"278","replacedBy":"350"},"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'projectAdded' is defined but never used.","'userAdded' is defined but never used.","'timecardAdded' is defined but never used.","'companyConfig' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'storedLogin', and 'storedLoginEmpty'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["351"],"React Hook useEffect has a missing dependency: 'storedLoginEmpty'. Either include it or remove the dependency array.",["352"],"React Hook useEffect has missing dependencies: 'dispatch', 'isAdmin', and 'login.session'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["353"],["354"],"no-native-reassign",["355"],"no-negated-in-lhs",["356"],["355"],["356"],"'loggedIn' is defined but never used.","'setmonthNow' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'idListPerMode', 'isAdmin', and 'loggedInUserId'. Either include them or remove the dependency array.",["357"],"React Hook useEffect has missing dependencies: 'dispatch' and 'monthNow'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["358"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["359"],["360"],["355"],["356"],["355"],["356"],["355"],["356"],["355"],["356"],["355"],["356"],["355"],["356"],"'FormH1' is defined but never used.","React Hook useEffect has missing dependencies: 'errors', 'history', and 'isLoading'. Either include them or remove the dependency array.",["361"],"'emptyInputs' is defined but never used.",["355"],["356"],"'ActionButton' is defined but never used.","'Container' is defined but never used.","'ModeSwitcher' is defined but never used.","'userRemoved' is defined but never used.","'projectRemoved' is defined but never used.","'currentAddressChanged' is defined but never used.","'currentContractorChanged' is defined but never used.","'Modal' is defined but never used.","'timecardsOfUserRemoved' is defined but never used.","'timecardsOfProjectRemoved' is defined but never used.","'actions' is defined but never used.",["355"],["356"],["355"],["356"],"'ListEditIcon' is defined but never used.",["362"],"React Hook useEffect has missing dependencies: 'calcTime' and 'timeWorked'. Either include them or remove the dependency array.",["363"],"'projectTime' is assigned a value but never used.","'contractorTime' is assigned a value but never used.","'handleEdit' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["355"],["356"],"React Hook useEffect has missing dependencies: 'addresses' and 'dispatch'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["364"],["355"],["356"],["355"],["356"],"React Hook useEffect has missing dependencies: 'dispatch' and 'login.session'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["365"],["355"],["356"],["355"],["356"],["355"],["356"],{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},"no-global-assign","no-unsafe-negation",{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},"Update the dependencies array to be: [dispatch, storedLogin, storedLoginEmpty]",{"range":"392","text":"393"},"Update the dependencies array to be: [login, storedLoginEmpty]",{"range":"394","text":"395"},"Update the dependencies array to be: [dispatch, isAdmin, login.isAuthenticated, login.session]",{"range":"396","text":"397"},"Update the dependencies array to be: [dispatch, isAdmin, login.isAuthenticated, login.session, monthIndex]",{"range":"398","text":"399"},"Update the dependencies array to be: [currentModeIndex, idListPerMode, isAdmin, loggedInUserId, monthIndex, timecards]",{"range":"400","text":"401"},"Update the dependencies array to be: [dispatch, monthNow]",{"range":"402","text":"403"},"Update the dependencies array to be: [dispatch, firstAddress, firstTimeLoadedAddress]",{"range":"404","text":"405"},"Update the dependencies array to be: [dispatch, firstContractor, firstTimeLoadedContractor]",{"range":"406","text":"407"},"Update the dependencies array to be: [errors, history, isLoading, timecards]",{"range":"408","text":"409"},"Update the dependencies array to be: [dispatch, savedTime]",{"range":"410","text":"411"},"Update the dependencies array to be: [projectId, currentModeIndex, selectedContractor, selectedMonth, timeCards, calcTime, timeWorked]",{"range":"412","text":"413"},"Update the dependencies array to be: [addresses, dispatch]",{"range":"414","text":"415"},"Update the dependencies array to be: [dispatch, history, login.session]",{"range":"416","text":"417"},[1433,1435],"[dispatch, storedLogin, storedLoginEmpty]",[1572,1579],"[login, storedLoginEmpty]",[2421,2444],"[dispatch, isAdmin, login.isAuthenticated, login.session]",[3259,3294],"[dispatch, isAdmin, login.isAuthenticated, login.session, monthIndex]",[2743,2784],"[currentModeIndex, idListPerMode, isAdmin, loggedInUserId, monthIndex, timecards]",[3443,3445],"[dispatch, monthNow]",[3735,3773],"[dispatch, firstAddress, firstTimeLoadedAddress]",[3880,3924],"[dispatch, firstContractor, firstTimeLoadedContractor]",[2271,2282],"[errors, history, isLoading, timecards]",[1604,1615],"[dispatch, savedTime]",[1705,1780],"[projectId, currentModeIndex, selectedContractor, selectedMonth, timeCards, calcTime, timeWorked]",[2000,2002],"[addresses, dispatch]",[913,922],"[dispatch, history, login.session]"]